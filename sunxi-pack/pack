#!/bin/bash
#
# pack/pack
# (c) Copyright 2013
# Allwinner Technology Co., Ltd. <www.allwinnertech.com>
# James Deng <csjamesdeng@allwinnertech.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

############################ Notice #####################################
# a. Some config files priority is as follows:
#    - xxx_${platform}.{cfg|fex} > xxx.{cfg|fex}
#    - ${chip}/${board}/*.{cfg|fex} > ${chip}/default/*.{cfg|fex}
#    - ${chip}/default/*.cfg > common/imagecfg/*.cfg
#    - ${chip}/default/*.fex > common/partition/*.fex
#  e.g. sun8iw7p1/configs/perf/image_linux.cfg > sun8iw7p1/configs/default/image_linux.cfg
#       > common/imagecfg/image_linux.cfg > sun8iw7p1/configs/perf/image.cfg
#       > sun8iw7p1/configs/default/image.cfg > common/imagecfg/image.cfg
#
# b. Support Nor storages rule:
#    - Need to create sys_partition_nor.fex or sys_partition_nor_${platform}.fex
#    - Add "{filename = "full_img.fex",     maintype = "12345678", \
#      subtype = "FULLIMG_00000000",}" to image[_${platform}].cfg
#
# c. Switch uart port
#    - Need to add your chip configs into pctools/linux/card_debug_pin
#    - Call pack with 'debug' parameters


if [ $(basename `pwd`) != "sunxi-pack" ] ; then
	echo "Please run at the top directory of pack"
	exit 1
fi

function pack_error()
{
	echo -e "\033[47;31mERROR: $*\033[0m"
}

function pack_warn()
{
	echo -e "\033[47;34mWARN: $*\033[0m"
}

function pack_info()
{
	echo -e "\033[47;30mINFO: $*\033[0m"
}

while getopts hc:p:b:B:d:f:s:m: OPTION
do
        case $OPTION in

        h) show_help
                exit 0
        ;;

        c) PACK_CHIP=$OPTARG
        ;;

        b) PACK_BOARD=$OPTARG
        ;;

        p) PACK_PLATFORM=$OPTARG
        ;;

        B) PACK_BOOT=$OPTARG
        ;;

        d) PACK_DEBUG=$OPTARG
        ;;

        f) PACK_FUNC=$OPTARG
        ;;

        s) PACK_SIG=$OPTARG
        ;;

        m) PACK_MODE=$OPTARG
        ;;

        *) show_help
        exit 0
        ;;

        esac
done

ROOT_DIR=`pwd`
TOOLS_DIR="${ROOT_DIR}/pctools/linux"
LICHEE_OUT="../output/${PACK_BOARD}"
FEX_OUT="../output/${PACK_BOARD}/pack"
OTA_TEST_NAME="ota_test"
#BPI
if [ ! -d ${LICHEE_OUT} ] ; then
	mkdir -p ${LICHEE_OUT}
fi
if [ -d ${LICHEE_OUT} ] ; then
	LICHEE_OUT=`cd ${LICHEE_OUT}; pwd`
else
	pack_error "build lichee before you pack"
	exit 1
fi

export PATH=${TOOLS_DIR}/mod_update:${TOOLS_DIR}/openssl:${TOOLS_DIR}/eDragonEx:${TOOLS_DIR}/fsbuild200:${TOOLS_DIR}/android:$PATH

tools_file_list=(
common/tools/split_xxxx.fex
chips/${PACK_CHIP}/tools/split_xxxx.fex
common/tools/usbtool_test.fex
chips/${PACK_CHIP}/tools/usbtool_test.fex
common/tools/cardscript.fex
chips/${PACK_CHIP}/tools/cardscript.fex
common/tools/cardtool.fex
chips/${PACK_CHIP}/tools/cardtool.fex
common/tools/usbtool.fex
chips/${PACK_CHIP}/tools/usbtool.fex
common/tools/aultls32.fex
chips/${PACK_CHIP}/tools/aultls32.fex
common/tools/aultools.fex
chips/${PACK_CHIP}/tools/aultools.fex
)

configs_file_list=(
common/toc/toc1.fex
common/toc/toc0.fex
common/imagecfg/image_linux.cfg
common/partition/sys_partition_dump.fex
common/partition/sys_partition_private.fex
chips/${PACK_CHIP}/configs/default/*
chips/${PACK_CHIP}/configs/${PACK_BOARD}/*.fex
chips/${PACK_CHIP}/configs/${PACK_BOARD}/*.cfg
)

boot_resource_list=(
chips/${PACK_CHIP}/boot-resource/boot-resource:$FEX_OUT/
chips/${PACK_CHIP}/boot-resource/boot-resource.ini:$FEX_OUT/
chips/${PACK_CHIP}/configs/${PACK_BOARD}/bootlogo.bmp:$FEX_OUT/boot-resource/
)

boot_file_list=(
chips/${PACK_CHIP}/bin/boot0_nand_${PACK_CHIP}.bin:$FEX_OUT/boot0_nand.fex
chips/${PACK_CHIP}/bin/boot0_sdcard_${PACK_CHIP}.bin:$FEX_OUT/boot0_sdcard.fex
chips/${PACK_CHIP}/bin/boot0_spinor_${PACK_CHIP}.bin:$FEX_OUT/boot0_spinor.fex
chips/${PACK_CHIP}/bin/fes1_${PACK_CHIP}.bin:$FEX_OUT/fes1.fex
chips/${PACK_CHIP}/bin/u-boot-${PACK_CHIP}.bin:$FEX_OUT/u-boot.fex
chips/${PACK_CHIP}/bin/u-boot-spinor-${PACK_CHIP}.bin:$FEX_OUT/u-boot-spinor.fex
chips/${PACK_CHIP}/bin/boot0_nand_${PACK_CHIP}-${OTA_TEST_NAME}.bin:$FEX_OUT/boot0_nand-${OTA_TEST_NAME}.fex
chips/${PACK_CHIP}/bin/boot0_sdcard_${PACK_CHIP}-${OTA_TEST_NAME}.bin:$FEX_OUT/boot0_sdcard-${OTA_TEST_NAME}.fex
chips/${PACK_CHIP}/bin/boot0_spinor_${PACK_CHIP}-${OTA_TEST_NAME}.bin:$FEX_OUT/boot0_spinor-${OTA_TEST_NAME}.fex
chips/${PACK_CHIP}/bin/u-boot-${PACK_CHIP}-${OTA_TEST_NAME}.bin:$FEX_OUT/u-boot-${OTA_TEST_NAME}.fex
chips/${PACK_CHIP}/bin/u-boot-spinor-${PACK_CHIP}-${OTA_TEST_NAME}.bin:$FEX_OUT/u-boot-spinor-${OTA_TEST_NAME}.fex
)

boot_file_secure=(
chips/${PACK_CHIP}/bin/semelis_${PACK_CHIP}.bin:$FEX_OUT/semelis.bin
chips/${PACK_CHIP}/bin/sboot_${PACK_CHIP}.bin:$FEX_OUT/sboot.bin
chips/${PACK_CHIP}/bin/sboot_${PACK_CHIP}-${OTA_TEST_NAME}.bin:$FEX_OUT/sboot-${OTA_TEST_NAME}.bin
)

function show_boards()
{
	printf "\nAll avaiable chips, platforms and boards:\n\n"
	printf "Chip            Board\n"
	for chipdir in $(find chips/ -mindepth 1 -maxdepth 1 -type d) ; do
		chip=`basename ${chipdir}`
		printf "${chip}\n"
		for boarddir in $(find chips/${chip}/configs/${platform} \
			-mindepth 1 -maxdepth 1 -type d) ; do
			board=`basename ${boarddir}`
			printf "                ${board}\n"
		done
	done
	printf "\nFor Usage:\n"
	printf "     $(basename $0) -h\n\n"
}

function uart_switch()
{
	cp $TOOLS_DIR/awk_debug_card0 $FEX_OUT/awk_debug_card0
	TX=`awk  '$0~"'$PACK_CHIP'"{print $2}' pctools/linux/card_debug_pin`
	RX=`awk  '$0~"'$PACK_CHIP'"{print $3}' pctools/linux/card_debug_pin`
	PORT=`awk  '$0~"'$PACK_CHIP'"{print $4}' pctools/linux/card_debug_pin`
	MS=`awk  '$0~"'$PACK_CHIP'"{print $5}' pctools/linux/card_debug_pin`
	CK=`awk  '$0~"'$PACK_CHIP'"{print $6}' pctools/linux/card_debug_pin`
	DO=`awk  '$0~"'$PACK_CHIP'"{print $7}' pctools/linux/card_debug_pin`
	DI=`awk  '$0~"'$PACK_CHIP'"{print $8}' pctools/linux/card_debug_pin`

	sed -i s'/jtag_ms = /jtag_ms = '$MS'/g' $FEX_OUT/awk_debug_card0
	sed -i s'/jtag_ck = /jtag_ck = '$CK'/g' $FEX_OUT/awk_debug_card0
	sed -i s'/jtag_do = /jtag_do = '$DO'/g' $FEX_OUT/awk_debug_card0
	sed -i s'/jtag_di = /jtag_di = '$DI'/g' $FEX_OUT/awk_debug_card0
	sed -i s'/uart_debug_port =/uart_debug_port = '$PORT'/g' $FEX_OUT/awk_debug_card0
	sed -i s'/uart_debug_tx =/uart_debug_tx = '$TX'/g' $FEX_OUT/awk_debug_card0
	sed -i s'/uart_debug_rx =/uart_debug_rx = '$RX'/g' $FEX_OUT/awk_debug_card0
	sed -i s'/uart_tx =/uart_tx = '$TX'/g' $FEX_OUT/awk_debug_card0
	sed -i s'/uart_rx =/uart_rx = '$RX'/g' $FEX_OUT/awk_debug_card0
	awk -f $FEX_OUT/awk_debug_card0 $FEX_OUT/sys_config.fex > $FEX_OUT/a.fex
	rm $FEX_OUT/sys_config.fex
	mv $FEX_OUT/a.fex $FEX_OUT/sys_config.fex
	echo "uart -> card0"
}

function copy_ota_test_file()
{
	printf "ota test bootloader by diff bootlogo\n"
	mv $FEX_OUT/boot-resource/bootlogo_ota_test.bmp $FEX_OUT/boot-resource/bootlogo.bmp

	printf "copying ota test boot file\n"
	if [ -f sys_partition_nor.fex -o \
	-f sys_partition_nor_${PACK_PLATFORM}.fex ];  then
		mv $FEX_OUT/boot0_spinor-${OTA_TEST_NAME}.fex	$FEX_OUT/boot0_spinor.fex
		mv $FEX_OUT/u-boot-spinor-${OTA_TEST_NAME}.fex	$FEX_OUT/u-boot-spinor.fex
	else
		mv $FEX_OUT/boot0_nand-${OTA_TEST_NAME}.fex		$FEX_OUT/boot0_nand.fex
		mv $FEX_OUT/boot0_sdcard-${OTA_TEST_NAME}.fex	$FEX_OUT/boot0_sdcard.fex
		mv $FEX_OUT/u-boot-${OTA_TEST_NAME}.fex		$FEX_OUT/u-boot.fex
	fi

	if [ "x${PACK_SECURE}" = "xsecure" ] ; then
		printf "copying ota test secure boot file\n"
		mv $FEX_OUT/sboot-${OTA_TEST_NAME}.bin $FEX_OUT/sboot.bin
	fi

	printf "ota test env by bootdelay(10) and logolevel(8)\n"
	sed -i 's/\(logolevel=\).*/\18/' $FEX_OUT/env.cfg
	sed -i 's/\(bootdelay=\).*/\110/' $FEX_OUT/env.cfg
}

function do_prepare()
{
	if [ -z "${PACK_CHIP}" -o -z "${PACK_PLATFORM}" -o -z "${PACK_BOARD}" ] ; then
		pack_error "invalid chip, platform or board."
		show_boards
		exit 1
	fi

	if [ ! -d chips/${PACK_CHIP}/configs/${PACK_BOARD} ] ; then
		pack_error "board dir or path do not exist."
		show_boards
		exit 1
	fi

	# Cleanup
	rm -rf $FEX_OUT/
	mkdir -p $FEX_OUT/
	rm -rf ../common/keys

	printf "copying tools file\n"
	for file in ${tools_file_list[@]} ; do
		cp -f $file $FEX_OUT/ 2> /dev/null
	done

if [ "x${PACK_MODE}" = "xdump" ] ; then
    cp -rf common/tools/usbtool_test.fex $FEX_OUT/usbtool.fex
fi

	printf "copying configs file\n"
	for file in ${configs_file_list[@]} ; do
		cp -f $file $FEX_OUT/ 2> /dev/null
	done
	# If platform config files exist, we will cover the default files
	# For example, mv $FEX_OUT/image_linux.cfg $FEX_OUT/image.cfg
	find ./$FEX_OUT/* -type f -a \( -name "*.fex" -o -name "*.cfg" \) -print | \
		sed "s#\(.*\)_${PACK_PLATFORM}\(\..*\)#mv -fv & \1\2#e"

	if [ "x${PACK_MODE}" = "xdump" ] ; then
		mv $FEX_OUT/sys_partition_dump.fex sys_partition.fex
	elif [ "x${PACK_FUNC}" = "xprvt" ] ; then
		mv $FEX_OUT/sys_partition_private.fex sys_partition.fex
	fi

	printf "copying boot resource\n"
	for file in ${boot_resource_list[@]} ; do
		cp -rf `echo $file | awk -F: '{print $1}'` \
			`echo $file | awk -F: '{print $2}'` 2>/dev/null
	done

	printf "copying boot file\n"
	for file in ${boot_file_list[@]} ; do
		cp -f `echo $file | awk -F: '{print $1}'` \
			`echo $file | awk -F: '{print $2}'` 2>/dev/null
	done

	if [ "x${PACK_SECURE}" = "xsecure" ] ; then
		printf "copying secure boot file\n"
		for file in ${boot_file_secure[@]} ; do
			cp -f `echo $file | awk -F: '{print $1}'` \
				`echo $file | awk -F: '{print $2}'`
		done
	fi

	if [ "x${PACK_MODE}" = "xota_test" ] ; then
		printf "copy ota test file\n"
		copy_ota_test_file
	fi

	# Here, we can switch uart to card or normal
	if [ "x${PACK_DEBUG}" = "xcard0" -a "x${PACK_MODE}" != "xdump" \
		-a "x${PACK_FUNC}" != "xprvt" ] ; then \
		uart_switch
	fi

	sed -i 's/\\boot-resource/\/boot-resource/g' $FEX_OUT/boot-resource.ini
	sed -i 's/\\\\/\//g' $FEX_OUT/image.cfg
	sed -i 's/^imagename/;imagename/g' $FEX_OUT/image.cfg

	IMG_NAME="${PACK_CHIP}_${PACK_PLATFORM}_${PACK_BOARD}_${PACK_DEBUG}"

    if [ "x${PACK_SIG}" != "xnone" ]; then
        IMG_NAME="${IMG_NAME}_${PACK_SIG}"
    fi

	if [ "x${PACK_MODE}" = "xdump" -o "x${PACK_MODE}" = "xota_test" ] ; then
		IMG_NAME="${IMG_NAME}_${PACK_MODE}"
	fi

	if [ "x${PACK_FUNC}" = "xprvt" ] ; then
		IMG_NAME="${IMG_NAME}_${PACK_FUNC}"
	fi

	if [ "x${PACK_SECURE}" = "xsecure" ] ; then
		IMG_NAME="${IMG_NAME}_${PACK_SECURE}"
	fi

	IMG_NAME="${IMG_NAME}.img"

	echo "imagename = $IMG_NAME" >> $FEX_OUT/image.cfg
	echo "" >> $FEX_OUT/image.cfg

	if [ "x${PACK_SECURE}" = "xsecure" ] ; then
		printf "add secure_bit in sys_config.fex\n"
		sed -i '/\[platform\]/a\secure_bit  = 1' $FEX_OUT/sys_config.fex
	fi
}

function do_common()
{
	cd $FEX_OUT/

	busybox unix2dos sys_config.fex
	busybox unix2dos sys_partition.fex
	script  sys_config.fex > /dev/null
	script  sys_partition.fex > /dev/null
	cp -f   sys_config.bin config.fex

	if [ "x${PACK_PLATFORM}" = "xdragonboard" ] ; then
		busybox dos2unix test_config.fex
		cp test_config.fex boot-resource/
		busybox unix2dos test_config.fex
		script test_config.fex > /dev/null
		cp test_config.bin boot-resource/
	fi

	# Those files for SpiNor. We will try to find sys_partition_nor.fex
	if [ -f sys_partition_nor.fex -o \
		-f sys_partition_nor_${PACK_PLATFORM}.fex ];  then

		mv -f sys_partition_nor_${PACK_PLATFORM}.fex \
			sys_partition_nor.fex >/dev/null 2>&1

		# Here, will create sys_partition_nor.bin
		busybox unix2dos sys_partition_nor.fex
		script  sys_partition_nor.fex > /dev/null
		update_boot0 boot0_spinor.fex   sys_config.bin SDMMC_CARD > /dev/null
		update_uboot u-boot-spinor.fex  sys_config.bin >/dev/null
	fi

	if [ -f "${LICHEE_OUT}/sunxi.dtb" ]; then
		ln -s ${LICHEE_OUT}/sunxi.dtb sunxi.fex
		update_uboot_fdt u-boot.fex sunxi.fex u-boot.fex >/dev/null
	fi

	# Those files for Nand or Card
	update_boot0 boot0_nand.fex	sys_config.bin NAND > /dev/null
	update_boot0 boot0_sdcard.fex	sys_config.bin SDMMC_CARD > /dev/null
	update_uboot u-boot.fex         sys_config.bin > /dev/null
	update_fes1  fes1.fex           sys_config.bin > /dev/null
	fsbuild	     boot-resource.ini  split_xxxx.fex > /dev/null

	if [ "x${PACK_FUNC}" = "xprvt" ] ; then
		u_boot_env_gen env_burn.cfg env.fex > /dev/null
	else
		u_boot_env_gen env.cfg env.fex > /dev/null
	fi

	if [ -f "$LICHEE_OUT/kernel/arisc" ]; then
		ln -s $LICHEE_OUT/kernel/arisc arisc.fex
	fi
}

function do_finish()
{
	# Yeah, it should contain all files into full_img.fex for spinor
	# Because, as usually, spinor image size is very small.
	# If fail to create full_img.fex, we should fake it empty.

	# WTF, it is so ugly! It must be sunxi_mbr.fex, not sunxi_mbr_xxx.fex
	# Check whether sys_partition_nor.bin is exist, and create sunxi_mbr.fex
	# for Nor.
	if [ -f sys_partition_nor.bin ]; then 
		mv -f sys_partition.bin         sys_partition.bin_back
		cp -f sys_partition_nor.bin     sys_partition.bin
		update_mbr                      sys_partition.bin 1 > /dev/null

		merge_package full_img.fex      boot0_spinor.fex \
			u-boot-spinor.fex sunxi_mbr.fex sys_partition.bin

		mv -f sys_partition.bin_back    sys_partition.bin
	fi
	if [ ! -f full_img.fex ]; then
		echo "full_img.fex is empty" > full_img.fex
	fi

	update_mbr          sys_partition.bin 4 > /dev/null

	cd ..
	printf "pack finish\n"
}

function do_createkeys()
{
	printf "ready to create keys\n"

	cp -v ../common/sign_config/dragon_toc.cfg dragon_toc.cfg

	if [ $? -ne 0 ]
	then
		pack_error "dragon toc config file is not exist"
		exit 1
	fi

	dragonsecboot -key dragon_toc.cfg ../common/keys 2> /dev/null
	if [ $? -ne 0 ]
	then
		pack_error "dragon toc run error"
		rm -rf dragon_toc.cfg

		exit 1
	fi

	rm -rf dragon_toc.cfg
}

function do_signature()
{
	printf "prepare for signature by openssl\n"

	if [ "x${PACK_PLATFORM}" = "xlinux" ] ; then
		cp -v ../common/sign_config/dragon_toc.cfg dragon_toc.cfg
	elif [ "x${PACK_PLATFORM}" = "xandroid" ] ; then
		cp -v ../common/sign_config/dragon_toc.cfg dragon_toc.cfg
	fi

	if [ $? -ne 0 ]
	then
		pack_error "dragon toc config file is not exist"
		exit 1
	fi

	dragonsecboot -toc0 dragon_toc.cfg ../common/keys  > /dev/null
	if [ $? -ne 0 ]
	then
		pack_error "dragon toc0 run error"
		exit 1
	fi

	update_toc0  toc0.fex           sys_config.bin
	if [ $? -ne 0 ]
	then
		pack_error "update toc0 run error"
		exit 1
	fi

	dragonsecboot -toc1 dragon_toc.cfg ../common/keys ../common/sign_config/cnf_base.cnf > /dev/null
	if [ $? -ne 0 ]
	then
		pack_error "dragon toc1 run error"
		exit 1
	fi

	echo "secure signature ok!"
}

################################ Platform func ################################

function do_pack_dragonboard()
{
	printf "packing for ${PACK_BOARD}\n"

	ln -s ${LICHEE_OUT}/kernel/boot.img boot.fex
	ln -s ${LICHEE_OUT}/rootfs/rootfs.ext4 rootfs.fex
}

function do_pack_linux()
{
	printf "packing for linux\n"

	ln -s ${LICHEE_OUT}/kernel/vmlinux.tar.bz2 vmlinux.fex
	ln -s ${LICHEE_OUT}/kernel/boot.img        boot.fex
	ln -s ${LICHEE_OUT}/rootfs/rootfs.ext4     rootfs.fex

	# Those files is ready for SPINor.
	ln -s ${LICHEE_OUT}/kernel/uImage          kernel.fex
	ln -s ${LICHEE_OUT}/rootfs/rootfs.squashfs rootfs_squashfs.fex

	if [ "x${PACK_SECURE}" = "xsecure" ] ; then
		do_createkeys > /dev/null
		do_signature
	else
		echo "normal"
	fi
}

do_prepare
do_common
do_pack_${PACK_PLATFORM}
do_finish
